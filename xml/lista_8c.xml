<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="lista_8c" kind="file" language="C++">
    <compoundname>lista.c</compoundname>
    <includes refid="lista_8h" local="yes">lista.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="3">
        <label>dados.h</label>
        <link refid="dados_8h"/>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="1">
        <label>lista.c</label>
        <link refid="lista_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>lista.h</label>
        <link refid="lista_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="lista_8c_1ae3b99323b6f8f35d80bb69ff1a27985e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA criar_lista</definition>
        <argsstring>()</argsstring>
        <name>criar_lista</name>
        <briefdescription>
<para>Inicializa a lista vazia, tendo o valor NULL no seu único nodo. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A lista inicializada. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="5" column="7" bodyfile="lista.c" bodystart="5" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1a37ba5fc3cfddb6bc94d4b54b00bc696e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA insere_cabeca</definition>
        <argsstring>(LISTA L, void *valor)</argsstring>
        <name>insere_cabeca</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
<para>Insere um apontador void na cabeça da lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Atual cabeça da lista, antes de ser inserida uma nova. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valor</parametername>
</parameternamelist>
<parameterdescription>
<para>Futura cabeça da lista. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista atualizada, em que &quot;void *valor&quot; é a nova cabeça da lista. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="11" column="7" bodyfile="lista.c" bodystart="11" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1abfcb205f3eb670157be0d1221021714b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* devolve_cabeca</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>devolve_cabeca</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que vai buscar o valor da cabeça da lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O apontador void correspondente à cabeça da lista. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="19" column="6" bodyfile="lista.c" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1ad9380152361127432c55c1c6067e05ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA proximo</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>proximo</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função para obter o proximo nodo da lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O próximo nodo da lista. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="23" column="7" bodyfile="lista.c" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1a9026a681a68322b5ec7f07137b864cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA remove_cabeca</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>remove_cabeca</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função para remover a cabeça da lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A lista, com a sua cabeça removida (isto é, uma lista sem o seu primeiro elemento). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="27" column="7" bodyfile="lista.c" bodystart="27" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1a4c10928f7acaa4e3de3760cea0dfd9c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lista_esta_vazia</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>lista_esta_vazia</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Verifica se a lista esta vazia. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1, caso esteja vazia, 0, caso nao esteja. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para><blockquote><para>Caso r seja 1, a lista é vazia, caso seja 0, a lista não é vazia. </para>
</blockquote></para>
        </inbodydescription>
        <location file="lista.c" line="35" column="5" bodyfile="lista.c" bodystart="35" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1afbf1fd7cbee0a00eef9742a686e60c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lengthLista</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>lengthLista</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Calcula o length da lista fornecida pelo utilizador. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O inteiro com o valor do length da lista fornecida. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="45" column="5" bodyfile="lista.c" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1a0b56764e73eb24ca541210236e5ee307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA add_livres</definition>
        <argsstring>(ESTADO *e, LISTA L)</argsstring>
        <name>add_livres</name>
        <param>
          <type><ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Adiciona todas as casas onde o bot pode jogar na lista ligada. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Estado atual do jogo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista ligada atualizada. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para><blockquote><para>Verifica se a peca branca esta em um dos cantos e dependendo disto, decide qual das duas funcoes chamar (<ref refid="lista_8h_1ad5a64a1e9c4f10ad2cad2f803b6fae49" kindref="member">add_cantos()</ref> ou add_around()). </para>
</blockquote></para>
        </inbodydescription>
        <location file="lista.c" line="54" column="7" bodyfile="lista.c" bodystart="54" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1ad5a64a1e9c4f10ad2cad2f803b6fae49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA add_cantos</definition>
        <argsstring>(ESTADO *e, LISTA L)</argsstring>
        <name>add_cantos</name>
        <param>
          <type><ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Adiciona na lista ligada todas as casas para onde o bot poderá jogar, caso a peca branca se encontre atualmente no canto. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Estado atual do jogo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista atualizada. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="74" column="7" bodyfile="lista.c" bodystart="74" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1a88263476521240485997a353379fbc2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA add_arround</definition>
        <argsstring>(ESTADO *e, LISTA L)</argsstring>
        <name>add_arround</name>
        <param>
          <type><ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Adiciona na lista ligada todas as casas para onde o bot poderá jogar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Estado atual do jogo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista atualizada. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para><blockquote><para>Passa as coordenadas como strings para a lista. </para>
</blockquote></para>
        </inbodydescription>
        <location file="lista.c" line="108" column="7" bodyfile="lista.c" bodystart="108" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1a3916f8605aca0c96da7fba4a91039203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA add_lados</definition>
        <argsstring>(ESTADO *e, LISTA L)</argsstring>
        <name>add_lados</name>
        <param>
          <type><ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Adiciona na lista ligada todas as casas para onde o bot podera jogar caso se encontre com col == 0 ou lin == 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Estado atual do jogo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista atualizada. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="147" column="7" bodyfile="lista.c" bodystart="147" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1aae3fd70fccd11c201d85a18c4dddf077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA add_bottom</definition>
        <argsstring>(ESTADO *e, LISTA L)</argsstring>
        <name>add_bottom</name>
        <param>
          <type><ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Adiciona na lista ligada todas as casas para onde o bot podera jogar caso se encontre com lin == 0 ou lin == 7. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Estado atual do jogo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista atualizada. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="198" column="7" bodyfile="lista.c" bodystart="198" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1a9cb229685e08e4b8706349624d2091a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeLista</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>freeLista</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Liberta o espaço alocado na memória para a lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="243" column="6" bodyfile="lista.c" bodystart="243" bodyend="249"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lista_8h" kindref="compound">lista.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="lista_8h_1ae3b99323b6f8f35d80bb69ff1a27985e" refkind="member"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1ae3b99323b6f8f35d80bb69ff1a27985e" kindref="member">criar_lista</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>r;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structnodo" kindref="compound">Nodo</ref>));</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;proximo<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11" refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" refkind="member"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*valor)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>r;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structnodo" kindref="compound">Nodo</ref>));</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;head<sp/>=<sp/>valor;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;proximo<sp/>=<sp/>L;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="lista_8h_1abfcb205f3eb670157be0d1221021714b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lista_8h_1abfcb205f3eb670157be0d1221021714b" kindref="member">devolve_cabeca</ref>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L-&gt;head;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="lista_8h_1ad9380152361127432c55c1c6067e05ae" refkind="member"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1ad9380152361127432c55c1c6067e05ae" kindref="member">proximo</ref>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L-&gt;proximo;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="lista_8h_1a9026a681a68322b5ec7f07137b864cbd" refkind="member"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1a9026a681a68322b5ec7f07137b864cbd" kindref="member">remove_cabeca</ref>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>L;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1ad9380152361127432c55c1c6067e05ae" kindref="member">proximo</ref>(L);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>free(tmp);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="lista_8h_1a4c10928f7acaa4e3de3760cea0dfd9c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lista_8h_1a4c10928f7acaa4e3de3760cea0dfd9c0" kindref="member">lista_esta_vazia</ref>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(L-&gt;proximo<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="lista_8h_1afbf1fd7cbee0a00eef9742a686e60c93" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lista_8h_1afbf1fd7cbee0a00eef9742a686e60c93" kindref="member">lengthLista</ref><sp/>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>T;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>=<sp/>L;<sp/>T-&gt;proximo<sp/>!=<sp/>NULL;<sp/>T<sp/>=<sp/>T-&gt;proximo)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="lista_8h_1a0b56764e73eb24ca541210236e5ee307" refkind="member"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1a0b56764e73eb24ca541210236e5ee307" kindref="member">add_livres</ref><sp/>(<ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref><sp/>*e,<sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>e-&gt;ultima_jogada.coluna,<sp/>lin<sp/>=<sp/>e-&gt;ultima_jogada.linha;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((col<sp/>==<sp/>7<sp/>&amp;&amp;<sp/>lin<sp/>==<sp/>7)<sp/>||<sp/>(col<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>lin<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1ad5a64a1e9c4f10ad2cad2f803b6fae49" kindref="member">add_cantos</ref>(e,<sp/>L);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lin<sp/>==<sp/>7<sp/>||<sp/>lin<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1aae3fd70fccd11c201d85a18c4dddf077" kindref="member">add_bottom</ref>(e,<sp/>L);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col<sp/>==<sp/>7<sp/>||<sp/>col<sp/>==<sp/><sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a3916f8605aca0c96da7fba4a91039203" kindref="member">add_lados</ref>(e,<sp/>L);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a88263476521240485997a353379fbc2e" kindref="member">add_arround</ref>(e,<sp/>L);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="lista_8h_1ad5a64a1e9c4f10ad2cad2f803b6fae49" refkind="member"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1ad5a64a1e9c4f10ad2cad2f803b6fae49" kindref="member">add_cantos</ref>(<ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref><sp/>*e,<sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>e-&gt;ultima_jogada.coluna,<sp/>lin<sp/>=<sp/>e-&gt;ultima_jogada.linha;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cord[4];</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>lin<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>VAZIO)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin,<sp/>col+1);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin+1,<sp/>col+1)<sp/>==<sp/>VAZIO)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin+1,<sp/>col+1);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin+1,<sp/>col)<sp/>==<sp/>VAZIO)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin+1,<sp/>col);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col<sp/>==<sp/>7<sp/>&amp;&amp;<sp/>lin<sp/>==<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col-1)<sp/>==<sp/>VAZIO)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin,<sp/>col-1);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col-1)<sp/>==<sp/>VAZIO)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin-1,<sp/>col-1);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col)<sp/>==<sp/>VAZIO)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin-1,<sp/>col);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="lista_8h_1a88263476521240485997a353379fbc2e" refkind="member"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1a88263476521240485997a353379fbc2e" kindref="member">add_arround</ref><sp/>(<ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref><sp/>*e,<sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>e-&gt;ultima_jogada.coluna,<sp/>lin<sp/>=<sp/>e-&gt;ultima_jogada.linha;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cord[4];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin,<sp/>col+1);<sp/></highlight><highlight class="comment">//Usa-se<sp/>sprintf<sp/>para<sp/>passar<sp/>as<sp/>coordenadas<sp/>como<sp/>strings<sp/>(&quot;transforma&quot;<sp/>int<sp/>em<sp/>char).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin+1,<sp/>col+1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin+1,<sp/>col+1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin+1,<sp/>col+1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin+1,<sp/>col+1);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin+1,<sp/>col)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin+1,<sp/>col)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin+1,<sp/>col)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin+1,<sp/>col);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col-1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col-1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col-1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin,<sp/>col-1);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col-1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col-1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col-1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin-1,<sp/>col-1);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin-1,<sp/>col);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col+1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col+1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col+1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin-1,<sp/>col+1);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin+1,<sp/>col-1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin+1,<sp/>col-1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin+1,<sp/>col-1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin+1,col-1);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="lista_8h_1a3916f8605aca0c96da7fba4a91039203" refkind="member"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1a3916f8605aca0c96da7fba4a91039203" kindref="member">add_lados</ref><sp/>(<ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref><sp/>*e,<sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>e-&gt;ultima_jogada.coluna,<sp/>lin<sp/>=<sp/>e-&gt;ultima_jogada.linha;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cord[4];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1,<sp/>col)<sp/>==<sp/>DOIS){</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin-1<sp/>,<sp/>col);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin-1,col+1);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin,<sp/>col+1);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin+1,<sp/>col+1);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin+1,<sp/>col);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1<sp/>,<sp/>col)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1<sp/>,<sp/>col)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin-1<sp/>,<sp/>col)<sp/>==<sp/>DOIS){</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin-1,<sp/>col);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin-1,col-1);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin,<sp/>col-1);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin+1,<sp/>col-1);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin+1,<sp/>col);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="lista_8h_1aae3fd70fccd11c201d85a18c4dddf077" refkind="member"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1aae3fd70fccd11c201d85a18c4dddf077" kindref="member">add_bottom</ref><sp/>(<ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref><sp/><sp/>*e,<sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lin<sp/>=<sp/>e-&gt;ultima_jogada.linha,<sp/>col<sp/>=<sp/>e-&gt;ultima_jogada.coluna;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cord[4];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lin<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin,<sp/>col<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin<sp/>+<sp/>1,<sp/>col);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin<sp/>+<sp/>1,<sp/>col<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin,<sp/>col<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin,<sp/>col<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>-<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin<sp/>-<sp/>1,<sp/>col);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin<sp/>-<sp/>1,<sp/>col<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>VAZIO<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>UM<sp/>||<sp/><ref refid="dados_8h_1ad4e371755c518dbe632dc8cb1280cdad" kindref="member">obter_casa</ref>(e,<sp/>lin,<sp/>col<sp/>+<sp/>1)<sp/>==<sp/>DOIS)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(cord,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lin,<sp/>col<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(L,<sp/>strdup(cord));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="lista_8h_1a9cb229685e08e4b8706349624d2091a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lista_8h_1a9cb229685e08e4b8706349624d2091a8" kindref="member">freeLista</ref><sp/>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="lista_8h_1a4c10928f7acaa4e3de3760cea0dfd9c0" kindref="member">lista_esta_vazia</ref>(L))<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*str<sp/>=<sp/><ref refid="lista_8h_1abfcb205f3eb670157be0d1221021714b" kindref="member">devolve_cabeca</ref>(L);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/><ref refid="lista_8h_1a9026a681a68322b5ec7f07137b864cbd" kindref="member">remove_cabeca</ref>(L);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(str);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lista.c"/>
  </compounddef>
</doxygen>
